#       x <<- y
#       m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
#   }
## initialize our matrixInverse to NULL, i.e, not yet computed.
matrixInverse <- NULL
## when setting the matrixOriginal, remember to invalidate the current matrixInverse.
set <- function(matrixInput){
matrixOriginal <<- matrixInput
matrixInverse <<- NULL
}
## when getting the matrixOriginal, nothing fancy to do here, just return what we have.
get <- function(){
matrixOriginal
}
## when setting the matrixInverse, nothing fancy to do here, just cache it.
setInverse <- function(matrixInverseInput){
matrixInverse <<- matrixInverseInput
}
## when getting the matrixInverse, nothing fancy to do here, just cache it.
## note: if it were me, i would change the pattern of these two functions, and do a calculation right
## here if not cached, never returning NULL.
getInverse <- function(){
matrixInverse
}
## creating public handles to our two pairs of get/set'ers.
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
##
## cacheSolve should replace a direct call to cache.  And, instead of accepting a matrix as an input,
## it should accept a pre-initialized data structure created by the makeCacheMatrix function above.
cacheSolve <- function(cache, ...) {
## Return a matrix that is the inverse of 'x'
#   cachemean <- function(x, ...) {
#     m <- x$getmean()
#     if(!is.null(m)) {
#       message("getting cached data")
#       return(m)
#     }
#     data <- x$get()
#     m <- mean(data, ...)
#     x$setmean(m)
#     m
#   }
matrixInverse <- cache$getInverse()
if (!is.null(matrixInverse)){
message("getting cached data")
return(matrixInverse)
}
## If we made it here, we did not have a cached value, so we need to compute our
## own inverse, and then cache it back into our structure for future use.
message("no cache, calculating return value")
## First, let's grag the original non-inverted matrix.
matrixOriginal <- cache$get()
## Computing the inverse of a square matrix can be done with the  solve  function in R.
## For example, if  X  is a square invertible matrix, then  solve(X)  returns its inverse.
## For this assignment, assume that the matrix supplied is always invertible.
matrixInverse <- solve(matrixOriginal, ...)
## Let's cache the newly calculated value.
cache$setInverse(matrixInverse)
## Return matrixInverse.
matrixInverse
}
##
## The correct way to utilize these functions:
## myMatrix <- matrix()
## myCacheMatrix <- makeCacheMatrix(myMatrix)
## myInverseMatrix <- cacheSolve(myCacheMatrix, ...)
##
##
## Send in a vector of matrixes that you want to test!
##
testcaseEngine <- function(matrixInput){
myDataStructure <- makeCacheMatrix(matrixInput)
print("Set 1: following two matrixes should be identical:")
print(myDataStructure$get())
print(matrixInput)
print ("following should be NULL:")
print (myDataStructure$getInverse())
inverseMatrix1 <- cacheSolve(myDataStructure)
print ("Set 2: following two matrixes should be identical, and the inverse of the first set:")
print(inverseMatrix1)
print(myDataStructure$getInverse())
print ("Set 3: following two matrixes should be identical, and identical to Set 2:")
inverseMatrix2 <- cacheSolve(myDataStructure)
print(inverseMatrix2)
print(myDataStructure$getInverse())
## Testing the cache is properly invalidated if the $get method is called.
print ("Set 4: following four values should be a 2x2 matrix of 1:4, a NULL, then two identical inverses, one calced, the other cached")
myDataStructure$set(matrix(1:4, nrow=2, ncol=2))
myDataStructure$get()
myDataStructure$getInverse()
myDataStructure$setInverse(cacheSolve(myDataStructure))
myDataStructure$getInverse()
MyDataStructure$getInverse()
}
##
## My set of test cases, some i pulled out of the discussion forums.
##
testcases <- function(){
print("Test Case 1:")
matrixOriginal <- matrix(c(1,2,3,4), nrow=2, ncol=2)
testcase(matrixOriginal)
print("Test Case 2:")
matrixOriginal2 <- matrix(c(0, 5, 99, 66), nrow=2, ncol=2)
testcase(matrixOriginal2)
print ("Test Case 3:")
testcase(matrix(1:16, 4, 4))
print ("Test Case 4:")
testcase(matrix(1:9, 3, 3))
print ("Test Case 5:")
testcase(matrix())
}
testcase3 <- function(){
print ("Test Case 3:")
testcase(matrix(1:16, 4, 4))
}
source("cacheMatrix.R")
testcase3()
##
## Michael Connolly, 2014
##
## The functions below are my solution to Assignment 2 in R Programming
##
##
## makeCacheMatrix creates a datastructure that stores two values: an original matrix, and the inverted matrix via solve()
##
makeCacheMatrix <- function(matrixOriginal = matrix()) {
#   makeVector <- function(x = numeric()) {
#     m <- NULL
#     set <- function(y) {
#       x <<- y
#       m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
#   }
## initialize our matrixInverse to NULL, i.e, not yet computed.
matrixInverse <- NULL
## when setting the matrixOriginal, remember to invalidate the current matrixInverse.
set <- function(matrixInput){
matrixOriginal <<- matrixInput
matrixInverse <<- NULL
}
## when getting the matrixOriginal, nothing fancy to do here, just return what we have.
get <- function(){
matrixOriginal
}
## when setting the matrixInverse, nothing fancy to do here, just cache it.
setInverse <- function(matrixInverseInput){
matrixInverse <<- matrixInverseInput
}
## when getting the matrixInverse, nothing fancy to do here, just cache it.
## note: if it were me, i would change the pattern of these two functions, and do a calculation right
## here if not cached, never returning NULL.
getInverse <- function(){
matrixInverse
}
## creating public handles to our two pairs of get/set'ers.
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
##
## cacheSolve should replace a direct call to cache.  And, instead of accepting a matrix as an input,
## it should accept a pre-initialized data structure created by the makeCacheMatrix function above.
cacheSolve <- function(cache, ...) {
## Return a matrix that is the inverse of 'x'
#   cachemean <- function(x, ...) {
#     m <- x$getmean()
#     if(!is.null(m)) {
#       message("getting cached data")
#       return(m)
#     }
#     data <- x$get()
#     m <- mean(data, ...)
#     x$setmean(m)
#     m
#   }
matrixInverse <- cache$getInverse()
if (!is.null(matrixInverse)){
message("getting cached data")
return(matrixInverse)
}
## If we made it here, we did not have a cached value, so we need to compute our
## own inverse, and then cache it back into our structure for future use.
message("no cache, calculating return value")
## First, let's grag the original non-inverted matrix.
matrixOriginal <- cache$get()
## Computing the inverse of a square matrix can be done with the  solve  function in R.
## For example, if  X  is a square invertible matrix, then  solve(X)  returns its inverse.
## For this assignment, assume that the matrix supplied is always invertible.
matrixInverse <- solve(matrixOriginal, ...)
## Let's cache the newly calculated value.
cache$setInverse(matrixInverse)
## Return matrixInverse.
matrixInverse
}
##
## The correct way to utilize these functions:
## myMatrix <- matrix()
## myCacheMatrix <- makeCacheMatrix(myMatrix)
## myInverseMatrix <- cacheSolve(myCacheMatrix, ...)
##
##
## Send in a vector of matrixes that you want to test!
##
testcaseEngine <- function(matrixInput){
myDataStructure <- makeCacheMatrix(matrixInput)
print("Set 1: following two matrixes should be identical:")
print(myDataStructure$get())
print(matrixInput)
print ("following should be NULL:")
print (myDataStructure$getInverse())
inverseMatrix1 <- cacheSolve(myDataStructure)
print ("Set 2: following two matrixes should be identical, and the inverse of the first set:")
print(inverseMatrix1)
print(myDataStructure$getInverse())
print ("Set 3: following two matrixes should be identical, and identical to Set 2:")
inverseMatrix2 <- cacheSolve(myDataStructure)
print(inverseMatrix2)
print(myDataStructure$getInverse())
## Testing the cache is properly invalidated if the $get method is called.
print ("Set 4: following four values should be a 2x2 matrix of 1:4, a NULL, then two identical inverses, one calced, the other cached")
myDataStructure$set(matrix(1:4, nrow=2, ncol=2))
myDataStructure$get()
myDataStructure$getInverse()
myDataStructure$setInverse(cacheSolve(myDataStructure))
myDataStructure$getInverse()
MyDataStructure$getInverse()
}
##
## My set of test cases, some i pulled out of the discussion forums.
##
testcases <- function(){
print("Test Case 1:")
matrixOriginal <- matrix(c(1,2,3,4), nrow=2, ncol=2)
testcase(matrixOriginal)
print("Test Case 2:")
matrixOriginal2 <- matrix(c(0, 5, 99, 66), nrow=2, ncol=2)
testcase(matrixOriginal2)
print ("Test Case 3:")
testcase(matrix(1:16, nrow=4, ncol=4))
print ("Test Case 4:")
testcase(matrix(1:9, nrow=3, ncol=3))
print ("Test Case 5:")
testcase(matrix())
}
testcase3 <- function(){
print ("Test Case 3:")
testcase(matrix(1:16, nrow=4, ncol=4))
}
? source("cachematrix.R")
testcase3()
foo = matrix(1:16, nrow=4, ncol=4)
solve(foo)
foo
solve(matrix(1:9, nrow=3, ncol=3))
solve(matrix(1:4, nrow=2, ncol=2))
solve(matrix(1:16, nrow=8, ncol=2))
solve(matrix(17:32, nrow=4, ncol=4))
? solve
testcases
testcases()
##
## Michael Connolly, 2014
##
## The functions below are my solution to Assignment 2 in R Programming
##
##
## makeCacheMatrix creates a datastructure that stores two values: an original matrix, and the inverted matrix via solve()
##
makeCacheMatrix <- function(matrixOriginal = matrix()) {
#   makeVector <- function(x = numeric()) {
#     m <- NULL
#     set <- function(y) {
#       x <<- y
#       m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
#   }
## initialize our matrixInverse to NULL, i.e, not yet computed.
matrixInverse <- NULL
## when setting the matrixOriginal, remember to invalidate the current matrixInverse.
set <- function(matrixInput){
matrixOriginal <<- matrixInput
matrixInverse <<- NULL
}
## when getting the matrixOriginal, nothing fancy to do here, just return what we have.
get <- function(){
matrixOriginal
}
## when setting the matrixInverse, nothing fancy to do here, just cache it.
setInverse <- function(matrixInverseInput){
matrixInverse <<- matrixInverseInput
}
## when getting the matrixInverse, nothing fancy to do here, just cache it.
## note: if it were me, i would change the pattern of these two functions, and do a calculation right
## here if not cached, never returning NULL.
getInverse <- function(){
matrixInverse
}
## creating public handles to our two pairs of get/set'ers.
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
##
## cacheSolve should replace a direct call to cache.  And, instead of accepting a matrix as an input,
## it should accept a pre-initialized data structure created by the makeCacheMatrix function above.
cacheSolve <- function(cache, ...) {
## Return a matrix that is the inverse of 'x'
#   cachemean <- function(x, ...) {
#     m <- x$getmean()
#     if(!is.null(m)) {
#       message("getting cached data")
#       return(m)
#     }
#     data <- x$get()
#     m <- mean(data, ...)
#     x$setmean(m)
#     m
#   }
matrixInverse <- cache$getInverse()
if (!is.null(matrixInverse)){
message("getting cached data")
return(matrixInverse)
}
## If we made it here, we did not have a cached value, so we need to compute our
## own inverse, and then cache it back into our structure for future use.
message("no cache, calculating return value")
## First, let's grag the original non-inverted matrix.
matrixOriginal <- cache$get()
## Computing the inverse of a square matrix can be done with the  solve  function in R.
## For example, if  X  is a square invertible matrix, then  solve(X)  returns its inverse.
## For this assignment, assume that the matrix supplied is always invertible.
matrixInverse <- solve(matrixOriginal, ...)
## Let's cache the newly calculated value.
cache$setInverse(matrixInverse)
## Return matrixInverse.
matrixInverse
}
##
## The correct way to utilize these functions:
## myMatrix <- matrix()
## myCacheMatrix <- makeCacheMatrix(myMatrix)
## myInverseMatrix <- cacheSolve(myCacheMatrix, ...)
##
##
## Send in a vector of matrixes that you want to test!
##
testcaseEngine <- function(matrixInput){
myDataStructure <- makeCacheMatrix(matrixInput)
print("Set 1: following two matrixes should be identical:")
print(myDataStructure$get())
print(matrixInput)
print ("following should be NULL:")
print (myDataStructure$getInverse())
inverseMatrix1 <- cacheSolve(myDataStructure)
print ("Set 2: following two matrixes should be identical, and the inverse of the first set:")
print(inverseMatrix1)
print(myDataStructure$getInverse())
print ("Set 3: following two matrixes should be identical, and identical to Set 2:")
inverseMatrix2 <- cacheSolve(myDataStructure)
print(inverseMatrix2)
print(myDataStructure$getInverse())
## Testing the cache is properly invalidated if the $get method is called.
print ("Set 4: following four values should be a 2x2 matrix of 1:4, a NULL, then two identical inverses, one calced, the other cached")
myDataStructure$set(matrix(1:4, nrow=2, ncol=2))
myDataStructure$get()
myDataStructure$getInverse()
myDataStructure$setInverse(cacheSolve(myDataStructure))
myDataStructure$getInverse()
MyDataStructure$getInverse()
}
##
## My set of test cases, some i pulled out of the discussion forums.
##
testcases <- function(){
print("Test Case 1:")
matrixOriginal <- matrix(c(1,2,3,4), nrow=2, ncol=2)
testcase(matrixOriginal)
print("Test Case 2:")
matrixOriginal2 <- matrix(c(0, 5, 99, 66), nrow=2, ncol=2)
testcase(matrixOriginal2)
print ("Test Case 3:")
testcase(matrix())
}
testcase3 <- function(){
print ("Test Case 3:")
testcase(matrix(1:16, nrow=4, ncol=4))
}
source("cachematrix.R")
testcases()
##
## Michael Connolly, 2014
##
## The functions below are my solution to Assignment 2 in R Programming
##
##
## makeCacheMatrix creates a datastructure that stores two values: an original matrix, and the inverted matrix via solve()
##
makeCacheMatrix <- function(matrixOriginal = matrix()) {
## initialize our matrixInverse to NULL, i.e, not yet computed.
matrixInverse <- NULL
## when setting the matrixOriginal, remember to invalidate the current matrixInverse.
set <- function(matrixInput){
matrixOriginal <<- matrixInput
matrixInverse <<- NULL
}
## when getting the matrixOriginal, nothing fancy to do here, just return what we have.
get <- function(){
matrixOriginal
}
## when setting the matrixInverse, nothing fancy to do here, just cache it.
setInverse <- function(matrixInverseInput){
matrixInverse <<- matrixInverseInput
}
## when getting the matrixInverse, nothing fancy to do here, just cache it.
## note: if it were me, i would change the pattern of these two functions, and do a calculation right
## here if not cached, never returning NULL.
getInverse <- function(){
matrixInverse
}
## creating public handles to our two pairs of get/set'ers.
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
##
## cacheSolve should replace a direct call to cache.  And, instead of accepting a matrix as an input,
## it should accept a pre-initialized data structure created by the makeCacheMatrix function above.
##
cacheSolve <- function(cache, ...) {
## fetch the inverse we already have in the cache.
matrixInverse <- cache$getInverse()
## if the cache value is valid, we're all good, let's get outta here.
if (!is.null(matrixInverse)){
message("getting cached data")
return(matrixInverse)
}
## If we made it to here, we did not have a cached value, so we need to compute our
## own inverse, and then cache it back into our structure for future use.
message("no cache, calculating return value")
## First, let's grag the original non-inverted matrix.
matrixOriginal <- cache$get()
## Computing the inverse of a square matrix can be done with the  solve  function in R.
## For example, if  X  is a square invertible matrix, then  solve(X)  returns its inverse.
## For this assignment, assume that the matrix supplied is always invertible.
matrixInverse <- solve(matrixOriginal, ...)
## Let's cache the newly calculated value.
cache$setInverse(matrixInverse)
## Return matrixInverse.
matrixInverse
}
##
## The correct way to utilize these functions:
## myMatrix <- matrix()
## myCacheMatrix <- makeCacheMatrix(myMatrix)
## myInverseMatrix <- cacheSolve(myCacheMatrix, ...)
##
##
## Send in a vector of matrixes that you want to test!
##
testcaseEngine <- function(matrixInput){
myDataStructure <- makeCacheMatrix(matrixInput)
print("Set 1: following two matrixes should be identical:")
print(myDataStructure$get())
print(matrixInput)
print ("following should be NULL:")
print (myDataStructure$getInverse())
inverseMatrix1 <- cacheSolve(myDataStructure)
print ("Set 2: following two matrixes should be identical, and the inverse of the first set:")
print(inverseMatrix1)
print(myDataStructure$getInverse())
print ("Set 3: following two matrixes should be identical, and identical to Set 2:")
inverseMatrix2 <- cacheSolve(myDataStructure)
print(inverseMatrix2)
print(myDataStructure$getInverse())
## Testing the cache is properly invalidated if the $get method is called.
print ("Set 4: following four values should be a 2x2 matrix of 1:4, a NULL, then two identical inverses, one calced, the other cached")
myDataStructure$set(matrix(1:4, nrow=2, ncol=2))
myDataStructure$get()
myDataStructure$getInverse()
myDataStructure$setInverse(cacheSolve(myDataStructure))
myDataStructure$getInverse()
MyDataStructure$getInverse()
}
##
## My set of test cases, some i pulled out of the discussion forums.
##
testcases <- function(){
print("Test Case 1:")
matrixOriginal <- matrix(c(1,2,3,4), nrow=2, ncol=2)
testcase(matrixOriginal)
print("Test Case 2:")
matrixOriginal2 <- matrix(c(0, 5, 99, 66), nrow=2, ncol=2)
testcase(matrixOriginal2)
print ("Test Case 3:")
testcase(matrix())
}
source("cachematrix.R")
testcases()
